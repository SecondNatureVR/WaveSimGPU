#pragma kernel Advect
#pragma kernel Diffuse
#pragma kernel AddForce

RWTexture3D<unorm float4> _NormalDirectionsRW;
RWTexture3D<float> _HeightMagnitudesRW;

RWStructuredBuffer<float4> backStepPos;

bool _enableDebugForce;

float _decay;
float _DiffusionScale;
float _AdvectScale;
float _AddForceScale;

float3 _SpherePos;
float3 _SphereVelocity;
float _SphereRadius;


#include "Assets/Shaders/FlowFieldCommon.hlsl"

float applyDecay(float value)
{
    return max(0, value + _decay * _dTime);
}

// Advect step
[numthreads(128, 1, 1)]
void Advect(uint3 id : SV_DispatchThreadID)
{
    uint3 coord = GetTexCoord(id.x);
    float3 pos = GetWorldPosition(id.x);
    float cMag = GET_CURRENT_MAGNITUDE;
    float3 cDir = GET_CURRENT_DIRECTION;
    float3 velocity = cMag * cDir;
    float3 backstepWorldPos = pos - velocity * _dTime * _AdvectScale;
    float3 backstepUV = GetTexUVFromWorldPosition(backstepWorldPos);

    backStepPos[id.x] = float4(backstepWorldPos, 1);

    float sMag = FLOW_SAMPLE_MAGNITUDE(backstepUV);
    float3 sDir = FLOW_SAMPLE_DIRECTION(backstepUV);
    float3 sVel = sMag * sDir;
    float3 lerpVel = lerp(velocity, sVel, _dTime);

    SET_MAGNITUDE(length(lerpVel));
    SET_DIRECTION(normalize(lerpVel));
}

// Add Force
[numthreads(128, 1, 1)]
void AddForce(uint3 id : SV_DispatchThreadID)
{
    float3 pos = GetWorldPosition(id.x);
    uint3 coord = GetTexCoord(id.x);
    float sDist = distance(pos, _SpherePos);
    if (_enableDebugForce && sDist < _SphereRadius)
    {
        float cMag = GET_CURRENT_MAGNITUDE;
        float3 cDir = GET_CURRENT_DIRECTION;
        float3 cVel = cMag * cDir;
        float3 nVel = lerp(cVel, _SphereVelocity * _AddForceScale, _dTime * rcp(1 + sDist));
        SET_MAGNITUDE(length(nVel));
        SET_DIRECTION(normalize(nVel));
    }
}

bool isOutOfBounds(int3 coord)
{
    return !( 0 < coord.x < (int)  TEX_DIMENSIONS.x
           && 0 < coord.y < (int)  TEX_DIMENSIONS.y
           && 0 < coord.z < (int)  TEX_DIMENSIONS.z
    );
}

void averageSurrounding(int3 coord, out float outMagnitude, out float3 outDirection)
{
    outMagnitude = 0.0;
    for (int x = -1; x < 2; x++)
    {
        for (int y = -1; y < 2; y++)
        {
            for (int z = -1; z < 2; z++)
            {
                int3 offset = int3(x, y, z);
                int3 adjCoord = coord + offset;
                float4 adjUV = GetTexUV(adjCoord);
                float adjMag = FLOW_SAMPLE_MAGNITUDE(adjUV);
                outMagnitude += adjMag;
                outDirection += FLOW_SAMPLE_DIRECTION(adjUV) * adjMag;
            }
        }
    }
    outMagnitude /= 27.0;
    outDirection = normalize(outDirection / 27.0);
}

[numthreads(128, 1, 1)]
void Diffuse(uint3 id : SV_DispatchThreadID)
{
    uint3 coord = GetTexCoord(id.x);
    float3 dir = GET_CURRENT_DIRECTION;
    float mag = GET_CURRENT_MAGNITUDE;
    float3 outDir = 0.0;
    float outMag = 0.0;
    averageSurrounding(coord, outMag, outDir);
    SET_MAGNITUDE(applyDecay(lerp(mag, outMag * _DiffusionScale, _dTime)));
    SET_DIRECTION(lerp(dir, outDir * _DiffusionScale, _dTime * _DiffusionScale));
}
